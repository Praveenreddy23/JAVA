--@Enum:-Enum is short for "enumerations", which means "specifically listed".
    ->An enum is a special "class" that represents a group of constants (unchangeable variables, like final variables).
    ->To create an enum, use the enum keyword (instead of class or interface), and separate the constants with a comma.
        Note: that they should be in uppercase letters:

      Eg:
      public class Main {
        enum Level {
          LOW,
          MEDIUM,
          HIGH;
        }

        public static void main(String[] args) {
          Level myVar = Level.MEDIUM;
          System.out.println(myVar);
        }
      }

  ->Every enum constant is always implicitly public static final.
  ->Since it is static, we can access it by using the enum Name. Since it is final,
  ->we canâ€™t create child enums.
  ->We can declare the main() method inside the enum.
  ->Hence we can invoke enum directly from the Command Prompt.
     Eg:
        enum Level {
                 LOW,
                 MEDIUM,
                 HIGH;


               public static void main(String[] args) {
                 Level myVar = Level.MEDIUM;
                 System.out.println(myVar);
               }
             }

 --@Enum and Inheritance:
    ->All enums implicitly extend java.lang.Enum class.
    ->As a class can only extend one parent in Java, so an enum cannot extend anything else.
    ->toString() method is overridden in java.lang.Enum class, which returns enum constant name.
    ->enum can implement many interfaces.

  --@methods:
--1)values()
  2)ordinal()
  3)valueOf()
  ->These methods are present inside java.lang.Enum.
 ->values() method can be used to return all values present inside the enum.
 ->Order is important in enums.By using the ordinal() method, each enum constant index can be found, just like an array index.
 ->valueOf() method returns the enum constant of the specified string value if exists.

